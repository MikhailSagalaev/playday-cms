/**
 * –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Airtable –≤ PostgreSQL
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * 1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è AIRTABLE_API_KEY –∏ AIRTABLE_BASE_ID
 * 2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run migrate:airtable
 */

require('dotenv').config();
const Airtable = require('airtable');
const { query, testConnection } = require('../src/config/database');
const fs = require('fs').promises;
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Airtable
const base = new Airtable({ apiKey: process.env.AIRTABLE_API_KEY }).base(process.env.AIRTABLE_BASE_ID);

// –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–µ–π Airtable -> PostgreSQL
const fieldMapping = {
  // –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
  '–ù–∞–∑–≤–∞–Ω–∏–µ –õ–ö': '–Ω–∞–∑–≤–∞–Ω–∏–µ_–ª–∫',
  '–ù–∞–∑–≤–∞–Ω–∏–µ': '–Ω–∞–∑–≤–∞–Ω–∏–µ',
  '–û–ø–∏—Å–∞–Ω–∏–µ': '–æ–ø–∏—Å–∞–Ω–∏–µ',
  'Email': 'email',
  '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞': '–Ω–æ–º–µ—Ä_—Ç–µ–ª–µ—Ñ–æ–Ω–∞',
  '–ö–∞—Ä—Ç–∏–Ω–∫–∞': '–∫–∞—Ä—Ç–∏–Ω–∫–∞',
  '–ê–¥—Ä–µ—Å': '–∞–¥—Ä–µ—Å',
  
  // –¢–∞–π–º-–∫–∞—Ä—Ç—ã (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã)
  '—Ç–∞–π–º-–∫–∞—Ä—Ç–∞ 1 —á–∞—Å–∞': '—Ç–∞–π–º_–∫–∞—Ä—Ç–∞_1_—á–∞—Å',
  '—Ç–∞–π–º-–∫–∞—Ä—Ç–∞ 2 —á–∞—Å–∞': '—Ç–∞–π–º_–∫–∞—Ä—Ç–∞_2_—á–∞—Å–∞',
  '—Ç–∞–π–º-–∫–∞—Ä—Ç–∞ 3 —á–∞—Å–∞': '—Ç–∞–π–º_–∫–∞—Ä—Ç–∞_3_—á–∞—Å–∞',
  '—Ç–∞–π–º-–∫–∞—Ä—Ç–∞ 4 —á–∞—Å–∞': '—Ç–∞–π–º_–∫–∞—Ä—Ç–∞_4_—á–∞—Å–∞',
  '—Ç–∞–π–º-–∫–∞—Ä—Ç–∞ 5 —á–∞—Å–æ–≤': '—Ç–∞–π–º_–∫–∞—Ä—Ç–∞_5_—á–∞—Å–æ–≤',
  
  // –ü—Ä–∏–∑—ã
  '–ü—Ä–∏–∑ 1 —Ç–µ–∫—Å—Ç': '–ø—Ä–∏–∑_1_—Ç–µ–∫—Å—Ç',
  '–ü—Ä–∏–∑ 1 –∫–∞—Ä—Ç–∏–Ω–∫–∞': '–ø—Ä–∏–∑_1_–∫–∞—Ä—Ç–∏–Ω–∫–∞',
  '–ü—Ä–∏–∑ 2 —Ç–µ–∫—Å—Ç': '–ø—Ä–∏–∑_2_—Ç–µ–∫—Å—Ç',
  '–ü—Ä–∏–∑ 2 –∫–∞—Ä—Ç–∏–Ω–∫–∞': '–ø—Ä–∏–∑_2_–∫–∞—Ä—Ç–∏–Ω–∫–∞',
  '–ü—Ä–∏–∑ 3 —Ç–µ–∫—Å—Ç': '–ø—Ä–∏–∑_3_—Ç–µ–∫—Å—Ç',
  '–ü—Ä–∏–∑ 3 –∫–∞—Ä—Ç–∏–Ω–∫–∞': '–ø—Ä–∏–∑_3_–∫–∞—Ä—Ç–∏–Ω–∫–∞',
  '–ü—Ä–∏–∑—ã —Ç–µ–∫—Å—Ç': '–ø—Ä–∏–∑—ã_—Ç–µ–∫—Å—Ç',
  '–†–æ–∑—ã–≥—Ä—ã—à —Ç–∞–π–º –∫–∞—Ä—Ç –Ω–∞ __ —á–∞—Å': '—Ä–æ–∑—ã–≥—Ä—ã—à_—Ç–∞–π–º_–∫–∞—Ä—Ç_—Ç–µ–∫—Å—Ç',
  '–ü–æ–ø–æ–ª–Ω–∏—Ç—å –∫–∞—Ä—Ç—É –Ω–∞ —Å—É–º–º—É': '–ø–æ–ø–æ–ª–Ω–∏—Ç—å_–∫–∞—Ä—Ç—É_—Å—É–º–º–∞',
  '–î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞': '–¥–∞—Ç–∞_—Å–ª–µ–¥—É—é—â–µ–≥–æ_—Ä–æ–∑—ã–≥—Ä—ã—à–∞',
  
  // –ê–∫—Ü–∏–∏
  '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞–∂–¥—ã–π —á–µ—Ç–≤–µ—Ä–≥ –ü–û 30': '–∑–∞–≥–æ–ª–æ–≤–æ–∫_—á–µ—Ç–≤–µ—Ä–≥_–ø–æ_30',
  '–ö–∞–∂–¥—ã–π —á–µ—Ç–≤–µ—Ä–≥ –≤—Å–µ –ø–æ': '–∫–∞–∂–¥—ã–π_—á–µ—Ç–≤–µ—Ä–≥_—Ç–µ–∫—Å—Ç',
  '–°–∫–∏–¥–∫–∞_1': '—Å–∫–∏–¥–∫–∞_1',
  '–°–∫–∏–¥–∫–∞_2': '—Å–∫–∏–¥–∫–∞_2',
  
  // –¢–∞–π–º-–∫–∞—Ä—Ç—ã (—Ü–µ–Ω—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)
  '–¢–∞–π–º –∫–∞—Ä—Ç–∞ (1 —á–∞—Å)': '—Ç–∞–π–º_–∫–∞—Ä—Ç–∞_1_—á–∞—Å_—Ü–µ–Ω–∞',
  '–¢–∞–π–º –∫–∞—Ä—Ç–∞ (2 —á–∞—Å)': '—Ç–∞–π–º_–∫–∞—Ä—Ç–∞_2_—á–∞—Å–∞_—Ü–µ–Ω–∞',
  '–¢–∞–π–º –∫–∞—Ä—Ç–∞ (3 —á–∞—Å)': '—Ç–∞–π–º_–∫–∞—Ä—Ç–∞_3_—á–∞—Å–∞_—Ü–µ–Ω–∞',
  '–¢–∞–π–º –∫–∞—Ä—Ç–∞ (4 —á–∞—Å)': '—Ç–∞–π–º_–∫–∞—Ä—Ç–∞_4_—á–∞—Å–∞_—Ü–µ–Ω–∞',
  '–¢–∞–π–º –∫–∞—Ä—Ç–∞ (5 —á–∞—Å)': '—Ç–∞–π–º_–∫–∞—Ä—Ç–∞_5_—á–∞—Å–æ–≤_—Ü–µ–Ω–∞',
  
  // –°–∏—Å—Ç–µ–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏: –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è
  '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ 1': '–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ_1',
  '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ 2': '–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ_2',
  '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ 3': '–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ_3',
  '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ 4': '–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ_4',
  '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ 5': '–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ_5',
  '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ 6': '–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ_6',
  
  // –°–∏—Å—Ç–µ–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏: –ë–æ–Ω—É—Å—ã
  '–ë–æ–Ω—É—Å 1': '–±–æ–Ω—É—Å_1',
  '–ë–æ–Ω—É—Å 2': '–±–æ–Ω—É—Å_2',
  '–ë–æ–Ω—É—Å 3': '–±–æ–Ω—É—Å_3',
  '–ë–æ–Ω—É—Å 4': '–±–æ–Ω—É—Å_4',
  '–ë–æ–Ω—É—Å 5': '–±–æ–Ω—É—Å_5',
  '–ë–æ–Ω—É—Å 6': '–±–æ–Ω—É—Å_6',
  
  // –°–∏—Å—Ç–µ–º–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π
  '–ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ 1': '–Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ_1',
  '–ü—Ä–∏–≤–∏–ª–µ–≥–∏—è 1': '–ø—Ä–∏–≤–∏–ª–µ–≥–∏—è_1',
  '–ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ 2': '–Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ_2',
  '–ü—Ä–∏–≤–∏–ª–µ–≥–∏—è 2': '–ø—Ä–∏–≤–∏–ª–µ–≥–∏—è_2',
  '–ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ 3': '–Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ_3',
  '–ü—Ä–∏–≤–∏–ª–µ–≥–∏—è 3': '–ø—Ä–∏–≤–∏–ª–µ–≥–∏—è_3',
  '–ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ 4': '–Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ_4',
  '–ü—Ä–∏–≤–∏–ª–µ–≥–∏—è 4': '–ø—Ä–∏–≤–∏–ª–µ–≥–∏—è_4'
};

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏
 */
async function migrateData() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –∏–∑ Airtable...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    console.log('üì° –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    const dbConnected = await testConnection();
    if (!dbConnected) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    }
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ Airtable
    console.log('üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Airtable...');
    const records = await base('–î–∞–Ω–Ω—ã–µ').select().all();
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${records.length} –∑–∞–ø–∏—Å–µ–π –≤ Airtable`);
    
    if (records.length === 0) {
      console.log('‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏');
      return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
    console.log('üë§ –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...');
    const defaultUser = await query(`
      INSERT INTO users (tilda_user_id, email, role)
      VALUES ($1, $2, $3)
      ON CONFLICT (tilda_user_id) DO UPDATE SET email = EXCLUDED.email
      RETURNING id
    `, ['migration_user', 'migration@playday.com', 'admin']);
    
    const userId = defaultUser.rows[0].id;
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω/–Ω–∞–π–¥–µ–Ω: ID ${userId}`);
    
    // –ú–∏–≥—Ä–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å
    let successCount = 0;
    let errorCount = 0;
    const errors = [];
    
    for (const [index, record] of records.entries()) {
      try {
        console.log(`üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å—å ${index + 1}/${records.length}: ${record.id}`);
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ Airtable –≤ —Ñ–æ—Ä–º–∞—Ç PostgreSQL
        const locationData = transformAirtableRecord(record);
        
        // –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
        await insertLocationRecord(userId, record.id, locationData);
        
        successCount++;
        console.log(`‚úÖ –ó–∞–ø–∏—Å—å ${record.id} —É—Å–ø–µ—à–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞`);
        
      } catch (error) {
        errorCount++;
        const errorMsg = `–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏ ${record.id}: ${error.message}`;
        console.error(`‚ùå ${errorMsg}`);
        errors.push(errorMsg);
      }
    }
    
    // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:');
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successCount}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
    
    if (errors.length > 0) {
      console.log('\n‚ùå –û—à–∏–±–∫–∏:');
      errors.forEach(error => console.log(`  - ${error}`));
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫–∏ –≤ —Ñ–∞–π–ª
      const errorLogPath = path.join(__dirname, '../logs/migration-errors.log');
      await fs.mkdir(path.dirname(errorLogPath), { recursive: true });
      await fs.writeFile(errorLogPath, errors.join('\n'));
      console.log(`üìÑ –õ–æ–≥ –æ—à–∏–±–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${errorLogPath}`);
    }
    
    console.log('\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    process.exit(1);
  }
}

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ Airtable –≤ —Ñ–æ—Ä–º–∞—Ç PostgreSQL
 */
function transformAirtableRecord(record) {
  const locationData = {};
  
  // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –ø–æ–ª—è–º –∑–∞–ø–∏—Å–∏
  Object.keys(record.fields).forEach(airtableField => {
    const pgField = fieldMapping[airtableField];
    if (pgField) {
      let value = record.fields[airtableField];
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
      if (typeof value === 'number') {
        // –ß–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è
        locationData[pgField] = value;
      } else if (typeof value === 'string') {
        // –°—Ç—Ä–æ–∫–æ–≤—ã–µ –ø–æ–ª—è - –æ–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ
        if (pgField.includes('–Ω–∞–∑–≤–∞–Ω–∏–µ') && value.length > 500) {
          value = value.substring(0, 500);
        } else if (pgField.includes('email') && value.length > 255) {
          value = value.substring(0, 255);
        } else if (pgField.includes('—Ç–µ–ª–µ—Ñ–æ–Ω–∞') && value.length > 50) {
          value = value.substring(0, 50);
        }
        locationData[pgField] = value;
      } else {
        // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
        locationData[pgField] = String(value);
      }
    }
  });
  
  return locationData;
}

/**
 * –í—Å—Ç–∞–≤–∫–∞ –∑–∞–ø–∏—Å–∏ –ª–æ–∫–∞—Ü–∏–∏ –≤ PostgreSQL
 */
async function insertLocationRecord(userId, airtableId, locationData) {
  // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—è –∏ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è INSERT
  const fields = Object.keys(locationData);
  const values = Object.values(locationData);
  
  if (fields.length === 0) {
    throw new Error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏');
  }
  
  // –°–æ–∑–¥–∞–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –¥–ª—è SQL
  const placeholders = fields.map((_, index) => `$${index + 3}`).join(', ');
  const fieldNames = fields.join(', ');
  
  const insertQuery = `
    INSERT INTO locations (user_id, record_id, ${fieldNames})
    VALUES ($1, $2, ${placeholders})
    ON CONFLICT (record_id) DO UPDATE SET
    ${fields.map((field, index) => `${field} = $${index + 3}`).join(', ')},
    updated_at = NOW()
    RETURNING id
  `;
  
  const result = await query(insertQuery, [userId, airtableId, ...values]);
  return result.rows[0].id;
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ URL
 */
async function downloadImage(url, filename) {
  try {
    const response = await fetch(url);
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    
    const buffer = await response.buffer();
    const uploadDir = process.env.UPLOAD_DIR || './uploads';
    const year = new Date().getFullYear();
    const month = String(new Date().getMonth() + 1).padStart(2, '0');
    const uploadPath = path.join(uploadDir, year.toString(), month);
    
    await fs.mkdir(uploadPath, { recursive: true });
    const fullPath = path.join(uploadPath, filename);
    
    await fs.writeFile(fullPath, buffer);
    return fullPath;
    
  } catch (error) {
    console.warn(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${url}: ${error.message}`);
    return null;
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞ –ø–µ—Ä–µ–¥ –º–∏–≥—Ä–∞—Ü–∏–µ–π
 */
async function createBackup() {
  console.log('üíæ –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö...');
  
  try {
    const backupData = await query(`
      SELECT * FROM locations ORDER BY created_at
    `);
    
    const backupPath = path.join(__dirname, '../backups', `pre-migration-${Date.now()}.json`);
    await fs.mkdir(path.dirname(backupPath), { recursive: true });
    await fs.writeFile(backupPath, JSON.stringify(backupData.rows, null, 2));
    
    console.log(`‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: ${backupPath}`);
    return backupPath;
    
  } catch (error) {
    console.warn(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø: ${error.message}`);
    return null;
  }
}

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏
if (require.main === module) {
  migrateData()
    .then(() => {
      console.log('üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('üí• –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
      process.exit(1);
    });
}

module.exports = {
  migrateData,
  transformAirtableRecord,
  insertLocationRecord,
  downloadImage,
  createBackup
};
