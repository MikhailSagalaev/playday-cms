const fastify = require('fastify')({
  logger: {
    level: process.env.LOG_LEVEL || 'info',
    transport: process.env.NODE_ENV === 'development' ? {
      target: 'pino-pretty',
      options: {
        colorize: true,
        translateTime: 'HH:MM:ss Z',
        ignore: 'pid,hostname'
      }
    } : undefined
  }
});

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–æ–≤
async function registerPlugins() {
  // CORS –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Tilda
  await fastify.register(require('@fastify/cors'), {
    origin: process.env.CORS_ORIGIN || true,
    credentials: process.env.CORS_CREDENTIALS === 'true'
  });

  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
  await fastify.register(require('@fastify/helmet'), {
    contentSecurityPolicy: false // –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Tilda
  });

  // Rate limiting
  await fastify.register(require('@fastify/rate-limit'), {
    max: parseInt(process.env.RATE_LIMIT_MAX) || 100,
    timeWindow: parseInt(process.env.RATE_LIMIT_TIME_WINDOW) || 60000
  });

  // JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
  await fastify.register(require('@fastify/jwt'), {
    secret: process.env.JWT_SECRET || 'your-secret-key-change-in-production'
  });

  // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ application/x-www-form-urlencoded –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤ Tilda
  await fastify.register(require('@fastify/formbody'));

  // Multipart –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
  await fastify.register(require('@fastify/multipart'), {
    limits: {
      fileSize: parseInt(process.env.MAX_FILE_SIZE) || 5242880 // 5MB
    }
  });

  // Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API
  await fastify.register(require('@fastify/swagger'), {
    swagger: {
      info: {
        title: 'PlayDay CMS API',
        description: 'API –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–Ω—Ç—Ä–æ–≤',
        version: '1.0.0'
      },
      host: process.env.HOST || 'localhost:3000',
      schemes: ['http', 'https'],
      consumes: ['application/json', 'multipart/form-data'],
      produces: ['application/json']
    }
  });

  await fastify.register(require('@fastify/swagger-ui'), {
    routePrefix: '/docs',
    uiConfig: {
      docExpansion: 'full',
      deepLinking: false
    }
  });
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
async function registerRoutes() {
  // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
  await fastify.register(require('./routes/auth'), { prefix: '/api/auth' });
  
  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏—è–º–∏
  await fastify.register(require('./routes/locations'), { prefix: '/api/locations' });
  
  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏
  await fastify.register(require('./routes/files'), { prefix: '/api/files' });
  
  // –í–µ–±—Ö—É–∫–∏
  await fastify.register(require('./routes/webhook'), { prefix: '/api/webhook' });
  
  // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Tilda
  await fastify.register(require('./routes/tilda'), { prefix: '/api/tilda' });
  
  // –ü—É–±–ª–∏—á–Ω—ã–π API (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
  await fastify.register(require('./routes/public'), { prefix: '/api/public' });
  
  // –ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã
  fastify.get('/health', async (request, reply) => {
    return { 
      status: 'ok', 
      timestamp: new Date().toISOString(),
      uptime: process.uptime(),
      version: process.env.npm_package_version || '1.0.0'
    };
  });

  // –ö–æ—Ä–Ω–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç
  fastify.get('/', async (request, reply) => {
    return { 
      message: 'PlayDay CMS API',
      version: '1.0.0',
      docs: '/docs'
    };
  });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
fastify.setErrorHandler((error, request, reply) => {
  fastify.log.error(error);
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—à–∏–±–æ–∫
  if (error.validation) {
    return reply.status(400).send({
      error: 'Validation Error',
      message: error.message,
      details: error.validation
    });
  }

  // JWT –æ—à–∏–±–∫–∏
  if (error.code === 'FST_JWT_NO_AUTHORIZATION_IN_HEADER') {
    return reply.status(401).send({
      error: 'Unauthorized',
      message: '–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'
    });
  }

  if (error.code === 'FST_JWT_AUTHORIZATION_TOKEN_INVALID') {
    return reply.status(401).send({
      error: 'Unauthorized',
      message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
    });
  }

  // –û—à–∏–±–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  if (error.code === '23505') { // Unique constraint violation
    return reply.status(409).send({
      error: 'Conflict',
      message: '–ó–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
    });
  }

  if (error.code === '23503') { // Foreign key constraint violation
    return reply.status(400).send({
      error: 'Bad Request',
      message: '–ù–∞—Ä—É—à–µ–Ω–∏–µ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏'
    });
  }

  // –û–±—â–∏–µ –æ—à–∏–±–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
  const statusCode = error.statusCode || 500;
  const message = process.env.NODE_ENV === 'production' 
    ? '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    : error.message;

  reply.status(statusCode).send({
    error: 'Internal Server Error',
    message
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404
fastify.setNotFoundHandler((request, reply) => {
  reply.status(404).send({
    error: 'Not Found',
    message: `–ú–∞—Ä—à—Ä—É—Ç ${request.method} ${request.url} –Ω–µ –Ω–∞–π–¥–µ–Ω`
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function start() {
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    require('dotenv').config();

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–ª–∞–≥–∏–Ω—ã
    await registerPlugins();

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
    await registerRoutes();

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    const host = process.env.HOST || '0.0.0.0';
    const port = parseInt(process.env.PORT) || 3000;

    await fastify.listen({ port, host });
    
    fastify.log.info(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://${host}:${port}`);
    fastify.log.info(`üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API: http://${host}:${port}/docs`);
    
  } catch (err) {
    fastify.log.error(err);
    process.exit(1);
  }
}

// Graceful shutdown
process.on('SIGTERM', async () => {
  fastify.log.info('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
  await fastify.close();
  process.exit(0);
});

process.on('SIGINT', async () => {
  fastify.log.info('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
  await fastify.close();
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  start();
}

module.exports = fastify;
