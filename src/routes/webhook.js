const { query } = require('../config/database');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –≤ —á–∏—Å–ª–æ
function safeParseInt(value) {
  if (!value || value === '' || value === 'null' || value === 'undefined') {
    return null;
  }
  const parsed = parseInt(value, 10);
  return isNaN(parsed) ? null : parsed;
}

async function webhookRoutes(fastify, options) {
  
  // POST /api/webhook/tilda - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±—Ö—É–∫–∞ –æ—Ç Tilda
  fastify.post('/tilda', async (request, reply) => {
    try {
      const rawData = request.body;
      
      fastify.log.info('üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç Tilda:', {
        contentType: request.headers['content-type'],
        data: rawData
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç Tilda
      if (rawData && rawData.test === 'test') {
        fastify.log.info('‚úÖ –ü–æ–ª—É—á–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç Tilda');
        return reply.code(200).send('OK');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã
      if (!rawData || Object.keys(rawData).length === 0) {
        return reply.code(400).send({
          error: 'Bad Request',
          message: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç Tilda'
        });
      }
      
      // Tilda –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ form-urlencoded, –∞ –Ω–µ –º–∞—Å—Å–∏–≤
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
      const item = rawData;
      // –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–µ–π –∏–∑ Tilda –≤ –ø–æ–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const locationData = {
        –Ω–∞–∑–≤–∞–Ω–∏–µ: item['–ù–∞–∑–≤–∞–Ω–∏–µ'] || item['Name'] || null,
        email: item['Email'] || null,
        –∞–¥—Ä–µ—Å: item['–ê–¥—Ä–µ—Å'] || null,
        
        // –¢–∞–π–º-–∫–∞—Ä—Ç—ã (—Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö)
        —Ç–∞–π–º_–∫–∞—Ä—Ç–∞_1_—á–∞—Å: safeParseInt(item['—Ç–∞–π–º-–∫–∞—Ä—Ç–∞_1_—á–∞—Å–∞']),
        —Ç–∞–π–º_–∫–∞—Ä—Ç–∞_2_—á–∞—Å–∞: safeParseInt(item['—Ç–∞–π–º-–∫–∞—Ä—Ç–∞_2_—á–∞—Å–∞']),
        —Ç–∞–π–º_–∫–∞—Ä—Ç–∞_3_—á–∞—Å–∞: safeParseInt(item['—Ç–∞–π–º-–∫–∞—Ä—Ç–∞_3_—á–∞—Å–∞']),
        —Ç–∞–π–º_–∫–∞—Ä—Ç–∞_4_—á–∞—Å–∞: safeParseInt(item['—Ç–∞–π–º-–∫–∞—Ä—Ç–∞_4_—á–∞—Å–∞']),
        —Ç–∞–π–º_–∫–∞—Ä—Ç–∞_5_—á–∞—Å–æ–≤: safeParseInt(item['—Ç–∞–π–º-–∫–∞—Ä—Ç–∞_5_—á–∞—Å–æ–≤']),
        
        // –ü—Ä–∏–∑—ã
        –ø—Ä–∏–∑_1_—Ç–µ–∫—Å—Ç: item['–ü—Ä–∏–∑_1_—Ç–µ–∫—Å—Ç'] || null,
        –ø—Ä–∏–∑_2_—Ç–µ–∫—Å—Ç: item['–ü—Ä–∏–∑_2_—Ç–µ–∫—Å—Ç'] || null,
        –ø—Ä–∏–∑_3_—Ç–µ–∫—Å—Ç: item['–ü—Ä–∏–∑_3_—Ç–µ–∫—Å—Ç'] || null,
        –ø—Ä–∏–∑_1_–∫–∞—Ä—Ç–∏–Ω–∫–∞: item['–ü—Ä–∏–∑_1_–∫–∞—Ä—Ç–∏–Ω–∫–∞'] || null,
        –ø—Ä–∏–∑_2_–∫–∞—Ä—Ç–∏–Ω–∫–∞: item['–ü—Ä–∏–∑_2_–∫–∞—Ä—Ç–∏–Ω–∫–∞'] || null,
        –ø—Ä–∏–∑_3_–∫–∞—Ä—Ç–∏–Ω–∫–∞: item['–ü—Ä–∏–∑_3_–∫–∞—Ä—Ç–∏–Ω–∫–∞'] || null,
        –ø—Ä–∏–∑—ã_—Ç–µ–∫—Å—Ç: item['–ü—Ä–∏–∑—ã_—Ç–µ–∫—Å—Ç'] || null,
        
        // –†–æ–∑—ã–≥—Ä—ã—à
        –ø–æ–ø–æ–ª–Ω–∏—Ç—å_–∫–∞—Ä—Ç—É_—Å—É–º–º–∞: safeParseInt(item['–ü–æ–ø–æ–ª–Ω–∏—Ç—å_–∫–∞—Ä—Ç—É_–Ω–∞_—Å—É–º–º—É']),
        –¥–∞—Ç–∞_—Å–ª–µ–¥—É—é—â–µ–≥–æ_—Ä–æ–∑—ã–≥—Ä—ã—à–∞: item['–î–∞—Ç–∞_—Å–ª–µ–¥—É—é—â–µ–≥–æ_—Ä–æ–∑—ã–≥—Ä—ã—à–∞'] || null,
        
        // –ê–∫—Ü–∏–∏
        –∑–∞–≥–æ–ª–æ–≤–æ–∫_—á–µ—Ç–≤–µ—Ä–≥_–ø–æ_30: item['–ó–∞–≥–æ–ª–æ–≤–æ–∫_–∫–∞–∂–¥—ã–π_—á–µ—Ç–≤–µ—Ä–≥_–ü–û_30'] || null,
        –∫–∞–∂–¥—ã–π_—á–µ—Ç–≤–µ—Ä–≥_—Ç–µ–∫—Å—Ç: item['–ö–∞–∂–¥—ã–π_—á–µ—Ç–≤–µ—Ä–≥_–≤—Å–µ_–ø–æ'] || null,
        
        // –¢–∞–π–º-–∫–∞—Ä—Ç—ã (—Ü–µ–Ω—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)
        —Ç–∞–π–º_–∫–∞—Ä—Ç–∞_1_—á–∞—Å_—Ü–µ–Ω–∞: safeParseInt(item['–¢–∞–π–º_–∫–∞—Ä—Ç–∞_1_—á–∞—Å']),
        —Ç–∞–π–º_–∫–∞—Ä—Ç–∞_2_—á–∞—Å–∞_—Ü–µ–Ω–∞: safeParseInt(item['–¢–∞–π–º_–∫–∞—Ä—Ç–∞_2_—á–∞—Å']),
        —Ç–∞–π–º_–∫–∞—Ä—Ç–∞_3_—á–∞—Å–∞_—Ü–µ–Ω–∞: safeParseInt(item['–¢–∞–π–º_–∫–∞—Ä—Ç–∞_3_—á–∞—Å']),
        —Ç–∞–π–º_–∫–∞—Ä—Ç–∞_4_—á–∞—Å–∞_—Ü–µ–Ω–∞: safeParseInt(item['–¢–∞–π–º_–∫–∞—Ä—Ç–∞_4_—á–∞—Å']),
        —Ç–∞–π–º_–∫–∞—Ä—Ç–∞_5_—á–∞—Å–æ–≤_—Ü–µ–Ω–∞: safeParseInt(item['–¢–∞–π–º_–∫–∞—Ä—Ç–∞_5_—á–∞—Å']),
        
        // –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –±–æ–Ω—É—Å—ã
        –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ_1: safeParseInt(item['–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ_1']),
        –±–æ–Ω—É—Å_1: safeParseInt(item['–ë–æ–Ω—É—Å_1']),
        –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ_2: safeParseInt(item['–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ_2']),
        –±–æ–Ω—É—Å_2: safeParseInt(item['–ë–æ–Ω—É—Å_2']),
        –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ_3: safeParseInt(item['–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ_3']),
        –±–æ–Ω—É—Å_3: safeParseInt(item['–ë–æ–Ω—É—Å_3']),
        –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ_4: safeParseInt(item['–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ_4']),
        –±–æ–Ω—É—Å_4: safeParseInt(item['–ë–æ–Ω—É—Å_4']),
        –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ_5: safeParseInt(item['–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ_5']),
        –±–æ–Ω—É—Å_5: safeParseInt(item['–ë–æ–Ω—É—Å_5']),
        –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ_6: safeParseInt(item['–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ_6']),
        –±–æ–Ω—É—Å_6: safeParseInt(item['–ë–æ–Ω—É—Å_6']),
        
        // –ù–∞–∫–æ–ø–ª–µ–Ω–∏—è –∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏
        –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ_1: safeParseInt(item['–ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ_1']),
        –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è_1: item['–ü—Ä–∏–≤–∏–ª–µ–≥–∏—è_1'] || null,
        –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ_2: safeParseInt(item['–ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ_2']),
        –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è_2: item['–ü—Ä–∏–≤–∏–ª–µ–≥–∏—è_2'] || null,
        –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ_3: safeParseInt(item['–ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ_3']),
        –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è_3: item['–ü—Ä–∏–≤–∏–ª–µ–≥–∏—è_3'] || null,
        –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ_4: safeParseInt(item['–ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ_4']),
        –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è_4: item['–ü—Ä–∏–≤–∏–ª–µ–≥–∏—è_4'] || null,
        
        // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ—Ç Tilda
        record_id: item['record_id'] || null,
        ma_name: item['ma_name'] || null,
        ma_email: item['ma_email'] || null,
        tranid: item['tranid'] || null,
        formid: item['formid'] || null
      };
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º record_id
      let existingRecord = null;
      if (locationData.record_id) {
        existingRecord = await query(
          'SELECT id FROM locations WHERE record_id = $1',
          [locationData.record_id]
        );
      }
      
      let result;
      let action;
      
      if (existingRecord && existingRecord.rows.length > 0) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
        const id = existingRecord.rows[0].id;
        const fields = [];
        const values = [];
        let paramIndex = 1;
        
        for (const [key, value] of Object.entries(locationData)) {
          if (key !== 'record_id') {
            fields.push(`${key} = $${paramIndex}`);
            values.push(value);
            paramIndex++;
          }
        }
        
        const updateQuery = `
          UPDATE locations 
          SET ${fields.join(', ')}, updated_at = NOW()
          WHERE id = $${paramIndex}
          RETURNING *
        `;
        
        values.push(id);
        result = await query(updateQuery, values);
        action = 'updated';
        
        fastify.log.info(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –ª–æ–∫–∞—Ü–∏—è: ${locationData.record_id} (ID: ${id})`);
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        const fields = Object.keys(locationData);
        const values = Object.values(locationData);
        const placeholders = fields.map((_, index) => `$${index + 1}`).join(', ');
        const fieldNames = fields.join(', ');
        
        const insertQuery = `
          INSERT INTO locations (${fieldNames})
          VALUES (${placeholders})
          RETURNING *
        `;
        
        result = await query(insertQuery, values);
        action = 'created';
        
        fastify.log.info(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è: ${locationData.record_id} (ID: ${result.rows[0].id})`);
      }
      
      reply.code(200).send('OK');
      
    } catch (error) {
      fastify.log.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞ –æ—Ç Tilda:', error);
      fastify.log.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
        message: error.message,
        stack: error.stack,
        code: error.code
      });
      reply.code(500).send({
        error: 'Internal Server Error',
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Tilda',
        details: process.env.NODE_ENV === 'development' ? error.message : undefined
      });
    }
  });
}

module.exports = webhookRoutes;